<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nano skill game with Nanode RPC</title>
</head>
<body>
    <h1>Nano Lottery System with Wallet and RPC Integration</h1>
    <h3>Admin Wallet: <span id="admin-wallet">nano_3adminwallet....</span></h3>
    <h4>Total Joined: <span id="total-joined">0</span>/100</h4>

    <label for="user-wallet">Connect your NanoVault Wallet:</label>
    <button id="connect-wallet-btn">Connect Wallet</button>
    
    <div id="wallet-info" style="display: none;">
        <h3>Your Wallet: <span id="connected-wallet"></span></h3>
        <label for="contribution-amount">Enter Contribution Amount (in Nano):</label>
        <input type="number" id="contribution-amount" min="0.1" step="0.1">
        <button id="send-funds-btn">Send Contribution</button>
    </div>

    <h3>Participants:</h3>
    <ul id="participants-list"></ul>

    <h3 id="status-msg"></h3>

    <script>
        const adminWallet = 'nano_3adminwallet....';
        const leagueSize = 100;
        let participants = [];

        const connectWalletBtn = document.getElementById('connect-wallet-btn');
        const sendFundsBtn = document.getElementById('send-funds-btn');
        const walletInfo = document.getElementById('wallet-info');
        const connectedWalletSpan = document.getElementById('connected-wallet');
        const participantsList = document.getElementById('participants-list');
        const totalJoinedDisplay = document.getElementById('total-joined');
        const statusMsg = document.getElementById('status-msg');

        let userWallet = null;

        connectWalletBtn.addEventListener('click', async function () {
            userWallet = prompt('Please enter your NanoVault wallet address:');
            
            if (userWallet && userWallet.startsWith('nano_')) {
                connectedWalletSpan.textContent = userWallet;
                walletInfo.style.display = 'block';
                connectWalletBtn.style.display = 'none';
            } else {
                alert('Invalid Nano wallet address!');
                userWallet = null;
            }
        });

        sendFundsBtn.addEventListener('click', async function () {
            const contributionAmount = parseFloat(document.getElementById('contribution-amount').value);

            if (!contributionAmount || contributionAmount <= 0) {
                alert('Please enter a valid amount!');
                return;
            }

            try {
                await sendNano(userWallet, adminWallet, contributionAmount);
                participants.push(userWallet);
                updateParticipants();
                statusMsg.textContent = `Contribution of ${contributionAmount} Nano sent!`;

                if (participants.length === leagueSize) {
                    selectWinner();
                }
            } catch (error) {
                console.error('Error sending funds:', error);
                alert('Failed to send funds.');
            }
        });

        function updateParticipants() {
            totalJoinedDisplay.textContent = participants.length;
            participantsList.innerHTML = '';
            participants.forEach(wallet => {
                const li = document.createElement('li');
                li.textContent = wallet;
                participantsList.appendChild(li);
            });
        }

        function selectWinner() {
            statusMsg.textContent = 'Selecting a random winner...';

            const randomIndex = Math.floor(Math.random() * participants.length);
            const winner = participants[randomIndex];

            statusMsg.textContent = `Winner is: ${winner}`;
            transferToWinner(winner);
        }

        async function sendNano(fromWallet, toWallet, amount) {
            try {
                const rawAmount = nanoToRaw(amount); 

                const payload = {
                    action: "send",
                    wallet: fromWallet,
                    source: fromWallet,
                    destination: toWallet,
                    amount: rawAmount
                };

                const response = await fetch("https://proxy.nanos.cc/proxy", {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();

                if (result.error) {
                    console.error('Error sending Nano:', result.error);
                    alert('Failed to send Nano: ' + result.error);
                    return;
                }

                console.log(`Successfully sent ${amount} Nano from ${fromWallet} to ${toWallet}`);
                alert(`Successfully sent ${amount} Nano!`);

                return result;
            } catch (error) {
                console.error('Error during Nano transfer:', error);
                alert('Failed to send Nano');
            }
        }

        function nanoToRaw(nano) {
            return BigInt(nano * Math.pow(10, 30)).toString();
        }

        async function checkBalance(walletAddress) {
            const payload = {
                action: "account_balance",
                account: walletAddress
            };

            const response = await fetch("https://proxy.nanos.cc/proxy", {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const result = await response.json();

            if (result.error) {
                console.error('Error checking balance:', result.error);
                alert('Failed to check balance: ' + result.error);
                return;
            }

            const balanceInNano = rawToNano(result.balance);
            console.log(`Balance of ${walletAddress}: ${balanceInNano} Nano`);
            return balanceInNano;
        }

        function rawToNano(raw) {
            return parseFloat(raw) / Math.pow(10, 30);
        }

        async function transferToWinner(winnerWallet) {
            const adminBalance = await checkBalance(adminWallet);

            if (adminBalance > 0) {
                await sendNano(adminWallet, winnerWallet, adminBalance);
                alert(`Transferred ${adminBalance} Nano to the winner: ${winnerWallet}`);
            } else {
                alert('No funds available to transfer.');
            }
        }
    </script>
</body>
</html>
